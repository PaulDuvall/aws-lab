AWSTemplateFormatVersion: 2010-09-09
Description: This produces a VPC for a web application

Mappings:
  # Ideally, this should be dynamically generated by following this example:
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/walkthrough-custom-resources-lambda-lookup-amiids.html
  # but that's overkill for the simple exercise that we're doing here.
  #
  # Add more AMI IDs here as needed
  RegionImageIds:
    ap-southeast-1:
      HVM: ami-0c20b8b385217763f  # Ubuntu Server 20.04 LTS (HVM), SSD Volume Type (64-bit x86)

Parameters:
  EnvironmentName:
    Description: The value for this parameter will be prefixed to resources names
    Type:        String

  # Ref: VPC and Subnet Sizing
  # https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#VPC_Sizing
  VpcCidr:
    Description: A CIDR that determines the IP range to be used for this VPC
    Type:        String
    Default:     10.10.0.0/16

  Subnet1Cidr:
    Description: A CIDR that determines the IP range of the subnet in the first AZ
    Type:        String
    # 254 IPs. Calculate with http://www.aboutmyip.com/AboutMyXApp/SubnetCalculator.jsp
    Default:     10.10.1.0/24

  Subnet2Cidr:
    Description: A CIDR that determines the IP range of the subnet in the second AZ
    Type:        String
    # 254 IPs. Calculate with http://www.aboutmyip.com/AboutMyXApp/SubnetCalculator.jsp
    Default:     10.10.2.0/24

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      Tags:
        - Key:   Name
          Value: !Sub ${EnvironmentName} VPC

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:               !Ref Vpc
      AvailabilityZone:    !Select [ 0, !GetAZs '' ]
      CidrBlock:            !Ref Subnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key:   Name
          Value: !Sub ${EnvironmentName} Subnet1

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:               !Ref Vpc
      AvailabilityZone:    !Select [ 1, !GetAZs '' ]
      CidrBlock:            !Ref Subnet2Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key:   Name
          Value: !Sub ${EnvironmentName} Subnet2

  #
  # BEGIN ELASTIC BEANSTALK CONFIG
  #

  WebApp:
    Type: AWS::ElasticBeanstalk::Application
    DependsOn: WebAppInstanceProfile
    Properties:
      ApplicationName: Web Application
      Description: AWS Elastic Beanstalk PHP Sample Application

  WebAppVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref WebApp
      Description:     WebApp v1.3
      SourceBundle:
        S3Bucket: elastic-beanstalk-sample
        S3Key:    php.zip

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-environment.html
  WebAppEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName:  !Ref WebApp
      Description:      !Sub Environemnt for ${!Ref WebApp}
      TemplateName:     !Ref WebAppConfigurationTemplate
      VersionLabel:     !Ref WebAppVersion

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-configurationtemplate.html
  WebAppConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName:   !Ref WebApp
      Description:       !Sub Configuration for ${!Ref WebApp}
      # Get official list of SolutionStackNames via `aws elasticbeanstalk  list-available-solution-stacks`
      SolutionStackName: 64bit Amazon Linux 2 v3.1.3 running PHP 7.4
      OptionSettings:
        - Namespace:  aws:autoscaling:asg
          OptionName: MinSize
          Value:      1

        - Namespace:  aws:autoscaling:asg
          OptionName: MaxSize
          Value:      2

        - Namespace:  aws:elasticbeanstalk:environment
          OptionName: EnvironmentType
          Value:      LoadBalanced

        - Namespace:  aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value:      !GetAtt WebAppInstanceProfile.Arn

  WebAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref WebAppInstanceProfileRole

  WebAppInstanceProfileRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: WebAppInstanceProfileRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      # https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-attach-managed-policy/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier

  #
  # END ELASTIC BEANSTALK CONFIG
  #
