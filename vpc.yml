AWSTemplateFormatVersion: 2010-09-09
Description: This deploys a PHP application using Elastic Beanstalk

Parameters:
  VpcCidrBlock:
    Type:    String
    Default: 10.1.0.0/16
  Subnet1CidrBlock:
    Type:    String
    Default: 10.1.10.0/24
  Subnet2CidrBlock:
    Type:    String
    Default: 10.1.11.0/24
  HostedZoneId:
    Type:    String
    Default: Z0140491KYZ2JUQ27RBR

Resources:
  #
  # VPC for EB Applications
  #

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:          !Ref VpcCidrBlock
      EnableDnsSupport:   true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  InternetGateway:
    Type:      AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:             !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:               !Ref VPC
        CidrBlock:           !Ref Subnet1CidrBlock
        AvailabilityZone:    !Select [ 0, !GetAZs ]
        MapPublicIpOnLaunch: true
        Tags:
        - Key:   Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1

  PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:               !Ref VPC
        CidrBlock:           !Ref Subnet2CidrBlock
        AvailabilityZone:    !Select [ 1, !GetAZs ]
        MapPublicIpOnLaunch: true
        Tags:
        - Key:   Name
          Value: !Sub ${AWS::StackName}-PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key:   Name
        Value: !Sub ${AWS::StackName}-PublicRouteTable

  # Entries for PublicRouteTable
  InternetGatewayRoute:
    Type:      AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:         !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:            !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:     !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:     !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  #
  # Shared Application Load Balancer
  #

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow port 80 from anywhere
        VpcId:            !Ref VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort:   80
          ToPort:     80
          CidrIp:     0.0.0.0/0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port:            80
      Protocol:        HTTP
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: You've reached this page by mistake
            StatusCode:  404

  #
  # DNS Records
  #

  WebAppDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name:         app.nextbigthing.relaxdiego.com
      Type:         CNAME
      TTL:          900
      ResourceRecords:
      - !GetAtt LoadBalancer.DNSName

  RestApiDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name:         api.nextbigthing.relaxdiego.com
      Type:         CNAME
      TTL:          900
      ResourceRecords:
      - !GetAtt LoadBalancer.DNSName

  #
  # PHP Application
  #

  WebApp:
    Type: AWS::ElasticBeanstalk::Application
    # Explicitly state this to avoid a race condition
    DependsOn: InstanceProfile
    Properties:
      ApplicationName: Web App
      Description: AWS Elastic Beanstalk PHP Sample Application

  WebAppVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref WebApp
      Description:     WebApp v1.3
      SourceBundle:
        S3Bucket: elastic-beanstalk-sample
        # Copied from https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/tutorials.html
        S3Key:    php.zip

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-environment.html
  WebAppEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName:  !Ref WebApp
      Description:      !Sub Environemnt for ${!Ref WebApp}
      TemplateName:     !Ref WebAppConfigurationTemplate
      VersionLabel:     !Ref WebAppVersion

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-configurationtemplate.html
  WebAppConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName:   !Ref WebApp
      Description:       !Sub Configuration for ${!Ref WebApp}
      # Get official list of SolutionStackNames via `aws elasticbeanstalk  list-available-solution-stacks`
      SolutionStackName: 64bit Amazon Linux 2 v3.1.3 running PHP 7.4
      # https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html
      OptionSettings:
        - Namespace:  aws:autoscaling:asg
          OptionName: MinSize
          Value:      2

        - Namespace:  aws:autoscaling:asg
          OptionName: MaxSize
          Value:      2

        - Namespace:  aws:elasticbeanstalk:environment
          OptionName: LoadBalancerType
          Value:      application

        - Namespace:  aws:elasticbeanstalk:environment
          OptionName: LoadBalancerIsShared
          Value:      true

        - Namespace:  aws:elbv2:loadbalancer
          OptionName: SecurityGroups
          Value:      !Ref LoadBalancerSecurityGroup

        - Namespace:  aws:elbv2:loadbalancer
          OptionName: SharedLoadBalancer
          Value:      !Ref LoadBalancer

        - Namespace:  aws:elbv2:listener:80
          OptionName: Rules
          Value:      app

        - Namespace:  aws:elbv2:listenerrule:app
          OptionName: HostHeaders
          Value:      app.nextbigthing.relaxdiego.com

        - Namespace:  aws:elbv2:listenerrule:app
          OptionName: Priority
          Value:      20

        - Namespace:  aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value:      !GetAtt InstanceProfile.Arn

        - Namespace:  aws:ec2:vpc
          OptionName: VPCId
          Value:      !Ref VPC

        - Namespace:  aws:ec2:vpc
          OptionName: Subnets
          Value:      !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ] ]

  #
  # Node.js Application
  #

  RestApi:
    Type: AWS::ElasticBeanstalk::Application
    # Explicitly state this to avoid a race condition
    DependsOn: InstanceProfile
    Properties:
      ApplicationName: REST API
      Description: AWS Elastic Beanstalk Node.js Sample REST API

  RestApiVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref RestApi
      Description:     Rest API v1.0
      SourceBundle:
        S3Bucket: elastic-beanstalk-sample
        # Copied from https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/tutorials.html
        S3Key:    nodejs.zip

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-environment.html
  RestApiEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName:  !Ref RestApi
      Description:      !Sub Environemnt for ${!Ref RestApi}
      TemplateName:     !Ref RestApiConfigurationTemplate
      VersionLabel:     !Ref RestApiVersion

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-configurationtemplate.html
  RestApiConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName:   !Ref RestApi
      Description:       !Sub Configuration for ${!Ref RestApi}
      # Get official list of SolutionStackNames via `aws elasticbeanstalk list-available-solution-stacks`
      SolutionStackName: 64bit Amazon Linux 2018.03 v4.17.0 running Node.js
      # https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html
      OptionSettings:
        - Namespace:  aws:autoscaling:asg
          OptionName: MinSize
          Value:      2

        - Namespace:  aws:autoscaling:asg
          OptionName: MaxSize
          Value:      2

        - Namespace:  aws:elasticbeanstalk:environment
          OptionName: LoadBalancerType
          Value:      application

        - Namespace:  aws:elasticbeanstalk:environment
          OptionName: LoadBalancerIsShared
          Value:      true

        - Namespace:  aws:elbv2:loadbalancer
          OptionName: SecurityGroups
          Value:      !Ref LoadBalancerSecurityGroup

        - Namespace:  aws:elbv2:loadbalancer
          OptionName: SharedLoadBalancer
          Value:      !Ref LoadBalancer

        - Namespace:  aws:elbv2:listener:80
          OptionName: Rules
          Value:      api

        - Namespace:  aws:elbv2:listenerrule:api
          OptionName: HostHeaders
          Value:      api.nextbigthing.relaxdiego.com

        - Namespace:  aws:elbv2:listenerrule:api
          OptionName: Priority
          Value:      10

        - Namespace:  aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value:      !GetAtt InstanceProfile.Arn

        - Namespace:  aws:ec2:vpc
          OptionName: VPCId
          Value:      !Ref VPC

        - Namespace:  aws:ec2:vpc
          OptionName: Subnets
          Value:      !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ] ]

  #
  # Intance Profile to be used by EB
  #

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceProfileRole

  InstanceProfileRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: InstanceProfileRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      # https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-attach-managed-policy/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier
